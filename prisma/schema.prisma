// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  emailEmail     String          @unique
  firstName      String?
  lastName       String?
  plans          Plan[]
  paymentMethods PaymentMethod[]
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")
  lastLogin      DateTime?
  payments       Payment[]
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  role           UserRoles       @default(USER)
  coupons        CouponUser[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PlanModel {
  id          String   @id @default(cuid())
  refill      Refill   @relation(fields: [refillId], references: [id])
  refillId    String
  name        String
  description String?
  price       Float
  vat         Boolean
  coupons     Coupon[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plans       Plan[]
  Bundle      Bundle?  @relation(fields: [bundleId], references: [id])
  bundleId    String?
}

enum PlanStatus {
  ACTIVE
  CANCELLED
  PENDING
  EXPIRED
}

model Plan {
  id          String     @id @default(cuid())
  friendlyId  Int        @unique @default(autoincrement())
  planModel   PlanModel  @relation(fields: [planModelId], references: [id])
  status      PlanStatus @default(ACTIVE)
  planModelId String
  price       Float
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  payment     Payment?   @relation(fields: [paymentId], references: [id])
  paymentId   String?    @unique
  allowRefill Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  line        Line?      @relation(fields: [lineId], references: [id])
  lineId      String?    @unique
  Bundle      Bundle?    @relation(fields: [bundleId], references: [id])
  bundleId    String?
  Refill      Refill?    @relation(fields: [refillId], references: [id])
  refillId    String?
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

model Payment {
  id                         String         @id @default(cuid())
  clearingTraceId            String?        @unique
  paymentId                  String?        @unique
  i4UClearingLogId           String?        @unique
  clearingConfirmationNumber String?        @unique
  paymentDate                DateTime?
  docId                      String?        @unique
  isDocumentCreated          Boolean?       @default(false)
  amount                     Float
  paymentMethod              PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId            String?        @unique
  status                     PaymentStatus
  user                       User           @relation(fields: [userId], references: [id])
  userId                     String
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  plan                       Plan?
  planId                     String?        @unique
  coupon                     Coupon?        @relation(fields: [couponId], references: [id])
  couponId                   String?
}

model PaymentMethod {
  id           String   @id @default(cuid())
  token        String?  @unique
  isBitPayment Boolean? @default(false)
  cardType     String
  last4        String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  payment      Payment?
  paymentId    String?  @unique
}

model Line {
  id                 String               @id @default(cuid())
  iccid              String               @unique
  deactivationDate   DateTime?
  expiredAt          DateTime?
  allowedUsageKb     Int?
  remainingUsageKb   Int?
  remainingDays      Int?
  status             String?
  bundle             Bundle               @relation(fields: [bundleId], references: [id])
  bundleId           String
  notes              String
  dataBundles        LinesOnDataBundles[]
  dataBundlesIds     String[]
  qrCode             String
  lpaCode            String
  msisdn             String?
  autoRefillTurnedOn Boolean?
  autoRefillAmountMb String?
  autoRefillPrice    Int?
  autoRefillCurrency String?
  autoRefillList     AutoRefillsLists[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  plan               Plan?
}

model AutoRefillsLists {
  refill    Refill   @relation(fields: [refillId], references: [id])
  refillId  String
  line      Line     @relation(fields: [lineId], references: [id])
  lineId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([refillId, lineId])
}

model LinesOnDataBundles {
  line         Line       @relation(fields: [lineId], references: [id])
  lineId       String
  dataBundle   DataBundle @relation(fields: [dataBundleId], references: [id])
  dataBundleId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([lineId, dataBundleId])
}

model Bundle {
  id          String      @id @default(cuid())
  externalId  String      @unique
  typeId      Int?
  name        String
  description String
  coverage    String[]
  refills     Refill[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  plans       Plan[]
  lines       Line[]
  planModel   PlanModel[]
}

model DataBundle {
  id                 String               @id @default(cuid())
  externalId         String               @unique
  status             BundleStatus
  allowedUsageKb     Int
  activeKb           Int
  remainingUsageKb   Int
  validity           Int
  assignedAt         String
  activatedAt        String
  terminatedAt       String
  expireAt           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  linesOnDataBundles LinesOnDataBundles[]
}

enum BundleStatus {
  NON_ACTIVE
  ACTIVE
  FINISHED
  EXPIRED
}

model Refill {
  id               String             @id @default(cuid())
  title            String
  amount_mb        Int
  amount_days      Int?
  price_usd        Float
  price_eur        Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  plan             Plan[]
  autoRefillsLists AutoRefillsLists[]
  bundle           Bundle             @relation(fields: [bundleId], references: [id])
  bundleId         String
  planModel        PlanModel[]
}

model Transaction {
  id                String @id @default(cuid())
  createdAtExternal String
  status            String
  amount            String
  currency          String
  type              String
  invoiceHash       String
  refillAmountMb    Int
  reason            String
  productId         String
}

model Country {
  id              String   @id @default(cuid())
  name            String   @unique
  translation     String
  lockTranslation Boolean  @default(false)
  show            Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum DiscountType {
  PERCENT
  AMOUNT
}

model Coupon {
  id             String       @id @default(cuid())
  code           String       @unique
  discount       Int
  discountType   DiscountType
  validFrom      DateTime
  validTo        DateTime
  maxUsesPerUser Int          @default(1)
  maxUsesTotal   Int          @default(-1)
  uses           Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  planModel      PlanModel?   @relation(fields: [planModelId], references: [id])
  planModelId    String?
  users          CouponUser[]
  payment        Payment[]
}

model CouponUser {
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([couponId, userId])
}

model Inquiry {
  id        String   @id @default(cuid())
  message   String
  name      String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
